version: '3.8'

services:
  # Main application service
  clinical-safety-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: lono-clinical-safety
    ports:
      - "8501:8501"  # Dashboard port
    volumes:
      - ./data:/app/data
      - ./outputs:/app/outputs
      - ./logs:/app/logs
      - ./.claude:/app/.claude:ro
    environment:
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GENERATOR_MODEL=${GENERATOR_MODEL:-claude-3-opus-20240229}
      - EVALUATOR_MODEL=${EVALUATOR_MODEL:-claude-opus-4-1-20250805}
      - MAX_ITERATIONS=${MAX_ITERATIONS:-3}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEV_MODE=${DEV_MODE:-true}
    restart: unless-stopped
    networks:
      - clinical-safety-network
    command: python dashboard.py

  # API service (for programmatic access)
  clinical-safety-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: lono-api
    ports:
      - "8000:8000"  # API port
    volumes:
      - ./data:/app/data:ro
      - ./outputs:/app/outputs
      - ./logs:/app/logs
      - ./.claude:/app/.claude:ro
    environment:
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GENERATOR_MODEL=${GENERATOR_MODEL:-claude-3-opus-20240229}
      - EVALUATOR_MODEL=${EVALUATOR_MODEL:-claude-opus-4-1-20250805}
      - MAX_ITERATIONS=${MAX_ITERATIONS:-3}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    restart: unless-stopped
    networks:
      - clinical-safety-network
    command: uvicorn api:app --host 0.0.0.0 --port 8000 --reload

  # Optional: PostgreSQL for storing evaluation results
  postgres:
    image: postgres:15-alpine
    container_name: lono-db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=lono
      - POSTGRES_PASSWORD=secure_password_change_me
      - POSTGRES_DB=clinical_safety
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - clinical-safety-network
    restart: unless-stopped

  # Optional: Redis for caching and job queues
  redis:
    image: redis:7-alpine
    container_name: lono-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - clinical-safety-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: lono-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - clinical-safety-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: lono-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin_password_change_me
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./configs/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - clinical-safety-network
    restart: unless-stopped
    depends_on:
      - prometheus

networks:
  clinical-safety-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
